{
	// Place your Designer workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"ContextLogger": {
		"scope": "csharp",
		"prefix": "log",
		"body": [
			"this.context.GetLogger().Log(",
			"\t${1|LogLevel.DEBUG,LogLevel.INFO,LogLevel.WARN,LogLevel.ERROR|},",
			"\t$\"$2\"",
			");$0"
		],
		"description": "Log using a context",
	},
	"ClassFull": {
		"scope": "csharp",
		"prefix": "classFull",
		"body": [
			"namespace Designer.${TM_DIRECTORY/.*src[\\/\\\\](([^\\/\\\\]*)([\\/\\\\])?)|([\\/\\\\])([^\\/\\\\]*)/$2${3:+.}${5:+.}$5/g} {",
			"\tpublic class ${TM_FILENAME_BASE} {",
			"\t\t$0",
			"\t}",
			"}"
		],
		"description": "Create a class with path as namespace (excluding src)",
	},
	"InterfaceFull": {
		"scope": "csharp",
		"prefix": "interfaceFull",
		"body": [
			"namespace Designer.${TM_DIRECTORY/.*src[\\/\\\\](([^\\/\\\\]*)([\\/\\\\])?)|([\\/\\\\])([^\\/\\\\]*)/$2${3:+.}${5:+.}$5/g} {",
			"\tpublic interface ${TM_FILENAME_BASE} {",
			"\t\t$0",
			"\t}",
			"}"
		],
		"description": "Create a interface with path as namespace (excluding src)",
	},
	
	"DelegateEvent": {
		"scope": "csharp",
		"prefix": "delegateEvent",
		"body": [
			"public delegate void $1Handler($2);",
			"public event $1Handler $1;$0",
		],
		"description": "Creates an event with delegate handler",
	}
}